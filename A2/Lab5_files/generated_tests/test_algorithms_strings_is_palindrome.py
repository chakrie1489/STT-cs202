# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.is_palindrome as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xf8\xd1>K\xb2\x03\xd0\xba\xce,\x1b\x85\xcb\xa0\x90\x99I\x80\x80\xea"
    module_0.is_palindrome(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    var_0 = module_0.is_palindrome(list_0)
    assert var_0 is True
    var_1 = module_0.is_palindrome(list_0)
    int_0 = -211
    module_0.is_palindrome_stack(int_0)


def test_case_2():
    str_0 = "7.adfFu?cZ\x0caGJ~{-Q1f"
    var_0 = module_0.is_palindrome_deque(str_0)
    assert var_0 is False


def test_case_3():
    str_0 = "7.adfFu?cZ\x0caGJ~{-Q1f"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.is_palindrome_two_pointer(str_0)
    assert var_0 is False
    var_1 = module_0.is_palindrome_reverse(list_0)
    assert var_1 is True
    var_2 = module_0.is_palindrome_deque(str_0)
    assert var_2 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ""
    var_0 = module_0.remove_punctuation(str_0)
    var_1 = module_0.is_palindrome_stack(str_0)
    assert var_1 is True
    var_2 = module_0.is_palindrome(var_0)
    assert var_2 is True
    bool_0 = False
    var_3 = module_0.is_palindrome_two_pointer(var_0)
    assert var_3 is True
    module_0.is_palindrome_reverse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "\n    Entry point for testing\n    "
    var_0 = module_0.is_palindrome_stack(str_0)
    assert var_0 is False
    var_1 = module_0.is_palindrome_deque(str_0)
    assert var_1 is False
    var_2 = module_0.is_palindrome_deque(str_0)
    assert var_2 is False
    module_0.string_reverse(var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    var_0 = module_0.is_palindrome_stack(list_0)
    assert var_0 is True
    bool_0 = True
    module_0.is_palindrome_deque(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "\n    Entry point for testing\n    "
    var_0 = module_0.is_palindrome_reverse(str_0)
    assert var_0 is False
    dict_0 = {str_0: str_0, str_0: str_0}
    var_1 = module_0.is_palindrome_deque(str_0)
    assert var_1 is False
    var_2 = module_0.is_palindrome_deque(dict_0)
    assert var_2 is True
    module_0.string_reverse(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    module_0.is_palindrome_stack(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "\n    Entry point for testing\n    "
    var_0 = module_0.is_palindrome(str_0)
    assert var_0 is False
    var_1 = module_0.is_palindrome_deque(str_0)
    assert var_1 is False
    var_2 = module_0.is_palindrome_deque(str_0)
    assert var_2 is False
    module_0.string_reverse(var_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "Dd*#?UG6\\]IL~\x0bD8"
    var_0 = module_0.remove_punctuation(str_0)
    assert var_0 == "ddugild"
    var_1 = module_0.is_palindrome_stack(str_0)
    assert var_1 is False
    var_2 = module_0.string_reverse(var_0)
    assert var_2 == "dligudd"
    var_3 = module_0.is_palindrome(var_0)
    assert var_3 is False
    bool_0 = False
    var_4 = module_0.is_palindrome_two_pointer(var_0)
    assert var_4 is False
    var_5 = module_0.remove_punctuation(str_0)
    assert var_5 == "ddugild"
    module_0.is_palindrome_reverse(bool_0)


def test_case_11():
    str_0 = "eT;+\\U+TuMyzt6"
    var_0 = module_0.is_palindrome_two_pointer(str_0)
    assert var_0 is False
    var_1 = module_0.is_palindrome_deque(str_0)
    assert var_1 is False


def test_case_12():
    str_0 = "^e4lc"
    var_0 = module_0.is_palindrome_deque(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "DW<(Bb~"
    var_0 = module_0.is_palindrome(str_0)
    assert var_0 is False
    var_1 = module_0.is_palindrome_stack(str_0)
    assert var_1 is False
    module_0.is_palindrome(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ":ss"
    var_0 = module_0.is_palindrome(str_0)
    assert var_0 is True
    var_1 = module_0.is_palindrome_deque(str_0)
    assert var_1 is True
    var_2 = module_0.is_palindrome_two_pointer(str_0)
    assert var_2 is True
    module_0.is_palindrome(var_1)


def test_case_15():
    str_0 = "TeT;+\\U+TuMyzt6"
    var_0 = module_0.is_palindrome_deque(str_0)
    assert var_0 is False
