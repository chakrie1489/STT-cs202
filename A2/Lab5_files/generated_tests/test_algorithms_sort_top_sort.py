# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.sort.top_sort as module_0


def test_case_0():
    str_0 = 'g+E;c"j!<A '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.top_sort_recursive(dict_0)
    assert module_0.GRAY == 0
    assert module_0.BLACK == 1


@pytest.mark.xfail(strict=True)
def test_case_1():
    tuple_0 = ()
    var_0 = module_0.top_sort_recursive(tuple_0)
    assert module_0.GRAY == 0
    assert module_0.BLACK == 1
    none_type_0 = None
    module_0.top_sort(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\x01zM\xa4kZ|\xb0\x0cT\x041xI\x8e\xb3\xab9+"
    module_0.top_sort(bytes_0)


def test_case_3():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.top_sort(dict_0)
    assert module_0.GRAY == 0
    assert module_0.BLACK == 1
    dict_1 = {}
    var_1 = module_0.top_sort(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_0.top_sort_recursive(bool_0)


def test_case_5():
    str_0 = 'g+E;c"j!<AN'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.top_sort(dict_0)
    assert module_0.GRAY == 0
    assert module_0.BLACK == 1


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x8a\xf7"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0}
    var_0 = module_0.top_sort(dict_0)
    assert module_0.GRAY == 0
    assert module_0.BLACK == 1
    module_0.top_sort_recursive(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "\n    Return the 'hailstone sequence' from n to 1\n    n: The starting point of the hailstone sequence\n    "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.top_sort_recursive(dict_0)
    assert module_0.GRAY == 0
    assert module_0.BLACK == 1
    module_0.top_sort_recursive(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "B"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.top_sort_recursive(dict_0)


def test_case_9():
    bytes_0 = b"\xb1xE!\xda^\xb7z\x01\xa6\xa4\xc3\x0e\x11\xc9"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0}
    with pytest.raises(ValueError):
        module_0.top_sort(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x8a\xf7"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0}
    var_0 = module_0.top_sort_recursive(dict_0)
    assert module_0.GRAY == 0
    assert module_0.BLACK == 1
    none_type_0 = None
    module_0.top_sort(none_type_0)


def test_case_11():
    dict_0 = {}
    var_0 = module_0.top_sort_recursive(dict_0)
    assert module_0.GRAY == 0
    assert module_0.BLACK == 1
    str_0 = "j"
    bytes_0 = b"\xd3\xdb\xb2\x8dZ\x13\xb3q]J\x7f9\xbf\x127"
    dict_1 = {str_0: str_0, str_0: str_0, bytes_0: str_0}
    with pytest.raises(ValueError):
        module_0.top_sort(dict_1)
