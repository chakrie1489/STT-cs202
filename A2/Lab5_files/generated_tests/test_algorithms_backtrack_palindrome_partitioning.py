# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.backtrack.palindrome_partitioning as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.palindromic_substrings(bool_0)


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.palindromic_substrings(tuple_0)


def test_case_2():
    none_type_0 = None
    var_0 = module_0.palindromic_substrings(none_type_0)
    tuple_0 = (var_0, var_0)
    var_1 = module_0.palindromic_substrings_iter(tuple_0)
    var_2 = module_0.palindromic_substrings(tuple_0)


def test_case_3():
    str_0 = 'V<OA_H\x0b}G\t"K?!H}U\\$'
    var_0 = module_0.palindromic_substrings(str_0)
    str_1 = "]^Q3,^g"
    none_type_0 = None
    var_1 = module_0.palindromic_substrings_iter(none_type_0)
    var_2 = module_0.palindromic_substrings(str_1)
    bool_0 = True
    var_3 = module_0.palindromic_substrings_iter(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xe6\xbd\xdd\x82a\xb4j\x92"
    var_0 = module_0.palindromic_substrings_iter(bytes_0)
    var_1 = module_0.palindromic_substrings_iter(var_0)
    module_1.object(*var_0)
