# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bfs.maze_search as module_0
import collections as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    var_0 = module_0.maze_search(tuple_1)
    assert var_0 == -1
    deque_0 = module_1.deque()
    module_0.maze_search(deque_0)


def test_case_1():
    str_0 = "Z"
    var_0 = module_0.maze_search(str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    deque_0 = module_1.deque()
    module_0.maze_search(deque_0)


def test_case_3():
    str_0 = "jZ"
    var_0 = module_0.maze_search(str_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "gPPB*Y+7:2%;Ntc"
    var_0 = module_0.maze_search(str_0)
    assert var_0 == -1
    bytes_0 = b"l\xc0,\x88\x11NQ4\xdd\x99nW\xc8>\xfa"
    list_0 = [bytes_0]
    deque_0 = module_1.deque(*list_0)
    var_1 = module_0.maze_search(list_0)
    assert var_1 == -1
    module_0.maze_search(deque_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "Xuf(*c};]u"
    var_0 = module_0.maze_search(str_0)
    assert var_0 == -1
    tuple_0 = (list_0, var_0)
    module_0.maze_search(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "Xuf(*c};]u"
    tuple_0 = (list_0, str_0)
    var_0 = module_0.maze_search(tuple_0)
    assert var_0 == -1
    bool_1 = False
    module_0.maze_search(bool_1)
