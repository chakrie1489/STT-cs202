# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import algorithms.stack.valid_parenthesis as module_0


def test_case_0():
    str_0 = "E?m$9aR77(8"
    bool_0 = module_0.is_valid(str_0)
    assert bool_0 is False


def test_case_1():
    str_0 = "=2b'+ /o^xX\x0c\x0bnLTIl)"
    bool_0 = module_0.is_valid(str_0)
    assert bool_0 is False


def test_case_2():
    str_0 = "\nProblem\nGiven a value `value`, if we want to make change for `value` cents, and we have infinite\nsupply of each of coins = {S1, S2, .. , Sm} valued `coins`, how many ways can we make the change?\nThe order of \x0bcoins` doesn't matter.\nFor example, for `value` = 4 and `coins` = [1, 2, 3], there are four solutions:\n[1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3].\nSo output should be 4.\n\nFor `value` = 10 and `coins` = [2, 5, 3, 6], there are five solutions:\n\n[2, 2, 2, 2, 2], [2, 2, 3, 3], [2, 2, 6], [2, 3, 5] and [5, 5].\nSo the output should be 5.\n\nTime complexity: O(n * m) where n is the `value` and m is the number of `coins`\nSpace complexity: O(n)\n"
    bool_0 = module_0.is_valid(str_0)
    assert bool_0 is True


def test_case_3():
    str_0 = "e8 Tzr*rWL*@\rjB&"
    bool_0 = module_0.is_valid(str_0)
    assert bool_0 is True
    str_1 = "\nProblem\nGiven a value `value`, if we want to make change for `value` cents, and we have infinite\nsupply of each of coins = {S1, S2, .. , Sm} valued `coins`, how many ways can we make the change?\nThe order of `coins` doesn't matter.\nFor example, for `value` = 4 and `coins` = [1, 2, 3], there are four solutions:\n[1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3].\nSo output should be 4.\n\nFor `value` = 10 and `coins` = [2, 5, 3, 6], there are five solutions:\n\n[2, 2, 2, 2, 2], [2, 2, 3, 3], [2, 2, 6], [2, 3, 5] and [5, 5].\nSo the output should be 5.\n\nTime complexity: O(n * m) where n is the `value` and m is the number of `coins`\nSpace complexity: O(n)\n"
    bool_1 = module_0.is_valid(str_1)
    assert bool_1 is True
    bool_2 = module_0.is_valid(str_1)
    assert bool_2 is True
    bool_3 = module_0.is_valid(str_1)
    assert bool_3 is True
    str_2 = '[,b\x0b"Z3<}O'
    bool_4 = module_0.is_valid(str_2)
    assert bool_4 is False
