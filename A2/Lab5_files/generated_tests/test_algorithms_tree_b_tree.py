# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.b_tree as module_0


def test_case_0():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(b_tree_0)


def test_case_1():
    list_0 = []
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(list_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(list_0)
    bool_1 = b_tree_0.find(list_0)
    assert bool_1 is True


def test_case_2():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(b_tree_0)
    assert bool_0 is False


def test_case_3():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(b_tree_0)


def test_case_4():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.traverse_tree()


def test_case_5():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3


@pytest.mark.xfail(strict=True)
def test_case_6():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    list_0 = [b_tree_0]
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    var_0 = node_0.__repr__()
    assert var_0 == "<id_node: []>"
    var_1 = var_0.__repr__()
    assert var_1 == "'<id_node: []>'"
    var_1.find(list_0)


def test_case_7():
    bool_0 = False
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)


def test_case_8():
    bool_0 = False
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    bool_1 = True
    var_1 = b_tree_0.insert_key(bool_1)
    var_2 = b_tree_0.insert_key(bool_1)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.remove_key(bool_1)


def test_case_9():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(b_tree_0)
    var_1 = b_tree_0.remove_key(b_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    node_1 = module_0.Node()
    var_0 = node_1.__repr__()
    assert var_0 == "<id_node: []>"
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_1 = b_tree_0.remove_key(bool_0)
    var_2 = b_tree_0.remove_key(var_1)
    var_3 = b_tree_0.insert_key(bool_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    int_0 = 1441
    bool_1 = b_tree_0.find(int_0)
    assert bool_1 is False
    bool_2 = False
    var_4 = node_0.__repr__()
    assert var_4 == "<id_node: []>"
    var_5 = var_1.__repr__()
    var_6 = b_tree_0.insert_key(bool_2)
    float_0 = 980.09423
    var_7 = b_tree_0.insert_key(float_0)
    bool_3 = b_tree_1.find(b_tree_0)
    assert bool_3 is False
    var_8 = b_tree_0.insert_key(bool_0)
    var_9 = var_8.__repr__()
    var_10 = b_tree_1.traverse_tree()
    var_11 = b_tree_1.insert_key(bool_0)
    var_12 = b_tree_0.insert_key(bool_0)
    var_13 = b_tree_0.remove_key(bool_0)
    var_14 = var_12.__repr__()
    b_tree_2 = module_0.BTree()
    assert b_tree_2.min_numbers_of_keys == 1
    assert b_tree_2.max_number_of_keys == 3
    var_15 = b_tree_0.remove_key(float_0)
    var_15.traverse_tree()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    var_1 = b_tree_0.remove_key(b_tree_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    float_0 = -2463.482501
    var_2 = b_tree_0.insert_key(float_0)
    bool_1 = b_tree_1.find(b_tree_0)
    assert bool_1 is False
    bool_2 = b_tree_0.find(float_0)
    assert bool_2 is True
    var_3 = b_tree_1.insert_key(bool_0)
    var_4 = b_tree_1.remove_key(bool_1)
    var_5 = none_type_0.__repr__()
    var_6 = b_tree_1.traverse_tree()
    var_7 = b_tree_1.insert_key(b_tree_1)
    var_5.traverse_tree()


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    var_0 = b_tree_1.insert_key(bool_0)
    b_tree_2 = module_0.BTree()
    assert b_tree_2.min_numbers_of_keys == 1
    assert b_tree_2.max_number_of_keys == 3
    float_0 = -2463.482501
    var_1 = module_0.BTree()
    assert var_1.min_numbers_of_keys == 1
    assert var_1.max_number_of_keys == 3
    bool_1 = b_tree_2.find(b_tree_1)
    assert bool_1 is False
    bool_2 = b_tree_1.find(float_0)
    assert bool_2 is False
    var_0.remove_key(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    bool_1 = True
    var_1 = b_tree_0.insert_key(bool_1)
    float_0 = -2463.482501
    var_2 = b_tree_0.insert_key(float_0)
    bool_2 = b_tree_1.find(b_tree_0)
    assert bool_2 is False
    bool_3 = b_tree_0.find(float_0)
    assert bool_3 is True
    var_3 = b_tree_1.insert_key(bool_0)
    var_4 = b_tree_0.insert_key(bool_0)
    var_5 = b_tree_1.remove_key(bool_2)
    var_6 = var_5.__repr__()
    var_7 = b_tree_1.traverse_tree()
    b_tree_0.remove_key(b_tree_1)


def test_case_14():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = bool_0.__repr__()
    var_1 = b_tree_0.insert_key(bool_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    bool_1 = True
    var_2 = b_tree_0.insert_key(bool_1)
    float_0 = 3.0
    var_3 = b_tree_0.insert_key(float_0)
    bool_2 = b_tree_1.find(var_0)
    assert bool_2 is False
    var_4 = b_tree_0.insert_key(bool_0)
    var_5 = b_tree_1.traverse_tree()
    var_6 = b_tree_0.insert_key(bool_0)
    bool_3 = True
    var_7 = b_tree_0.insert_key(bool_3)
    var_8 = b_tree_0.remove_key(float_0)
    var_9 = b_tree_0.traverse_tree()


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)
    b_tree_0.remove_key(var_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    var_0 = b_tree_1.insert_key(bool_0)
    var_1 = b_tree_1.insert_key(bool_0)
    b_tree_2 = module_0.BTree()
    assert b_tree_2.min_numbers_of_keys == 1
    assert b_tree_2.max_number_of_keys == 3
    bool_1 = True
    var_2 = b_tree_1.insert_key(bool_1)
    float_0 = -2463.483
    var_3 = b_tree_1.insert_key(float_0)
    bool_2 = b_tree_2.find(b_tree_1)
    assert bool_2 is False
    bool_3 = b_tree_1.find(float_0)
    assert bool_3 is True
    var_4 = b_tree_2.insert_key(bool_0)
    b_tree_3 = module_0.BTree()
    assert b_tree_3.min_numbers_of_keys == 1
    assert b_tree_3.max_number_of_keys == 3
    var_5 = b_tree_2.remove_key(bool_2)
    var_6 = b_tree_3.traverse_tree()
    var_7 = b_tree_3.traverse_tree()
    b_tree_1.remove_key(b_tree_2)


def test_case_17():
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.remove_key(bool_0)


def test_case_18():
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    bool_1 = False
    var_1 = b_tree_0.insert_key(bool_1)
    float_0 = -2459.0101513840686
    var_2 = b_tree_0.insert_key(float_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.remove_key(float_0)


def test_case_19():
    bool_0 = False
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    bool_1 = True
    var_1 = b_tree_0.insert_key(bool_1)
    float_0 = 950.7107440571375
    var_2 = b_tree_0.insert_key(float_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = var_3.__repr__()
    var_5 = b_tree_1.traverse_tree()
    var_6 = b_tree_0.insert_key(bool_0)
    bool_2 = True
    var_7 = b_tree_0.insert_key(bool_2)
    var_8 = b_tree_0.remove_key(bool_0)
    var_9 = b_tree_0.remove_key(float_0)


def test_case_20():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = bool_0.__repr__()
    var_1 = b_tree_0.insert_key(bool_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    bool_1 = True
    var_2 = b_tree_0.insert_key(bool_1)
    float_0 = 3.0
    var_3 = b_tree_0.insert_key(float_0)
    bool_2 = b_tree_1.find(var_0)
    assert bool_2 is False
    var_4 = b_tree_0.insert_key(bool_0)
    var_5 = b_tree_1.traverse_tree()
    var_6 = b_tree_0.insert_key(bool_0)
    bool_3 = True
    var_7 = b_tree_0.insert_key(bool_3)
    var_8 = b_tree_0.remove_key(float_0)
    var_9 = b_tree_0.traverse_tree()


def test_case_21():
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    var_1 = b_tree_0.insert_key(bool_0)
    float_0 = 743.405
    var_2 = b_tree_0.insert_key(float_0)
    bool_1 = b_tree_1.find(b_tree_0)
    assert bool_1 is False
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.remove_key(float_0)


def test_case_22():
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    float_0 = -46.3
    var_1 = b_tree_0.insert_key(float_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.remove_key(bool_0)
    var_5 = b_tree_0.remove_key(float_0)


def test_case_23():
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    bool_1 = False
    var_1 = b_tree_0.insert_key(bool_1)
    var_2 = b_tree_0.insert_key(bool_1)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.remove_key(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(bool_0)
    b_tree_1 = module_0.BTree()
    assert b_tree_1.min_numbers_of_keys == 1
    assert b_tree_1.max_number_of_keys == 3
    var_1 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_1.find(b_tree_0)
    assert bool_1 is False
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = var_2.__repr__()
    var_4 = b_tree_1.traverse_tree()
    var_5 = b_tree_0.insert_key(bool_0)
    var_6 = b_tree_0.remove_key(bool_0)
    var_7 = b_tree_0.remove_key(bool_0)
    var_6.remove_key(var_7)
