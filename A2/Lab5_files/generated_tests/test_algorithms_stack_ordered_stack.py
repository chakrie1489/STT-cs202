# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.stack.ordered_stack as module_0


def test_case_0():
    ordered_stack_0 = module_0.OrderedStack()
    none_type_0 = None
    var_0 = ordered_stack_0.push(none_type_0)
    assert ordered_stack_0.items == [None]
    var_1 = ordered_stack_0.size()


@pytest.mark.xfail(strict=True)
def test_case_1():
    ordered_stack_0 = module_0.OrderedStack()
    none_type_0 = None
    var_0 = ordered_stack_0.push(ordered_stack_0)
    assert len(ordered_stack_0.items) == 1
    ordered_stack_0.push(none_type_0)


def test_case_2():
    ordered_stack_0 = module_0.OrderedStack()
    with pytest.raises(IndexError):
        ordered_stack_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    ordered_stack_0 = module_0.OrderedStack()
    list_1 = [ordered_stack_0, list_0, ordered_stack_0, ordered_stack_0]
    var_0 = ordered_stack_0.push_t(list_1)
    ordered_stack_0.push(list_0)


def test_case_4():
    ordered_stack_0 = module_0.OrderedStack()


@pytest.mark.xfail(strict=True)
def test_case_5():
    ordered_stack_0 = module_0.OrderedStack()
    var_0 = ordered_stack_0.push_t(ordered_stack_0)
    var_1 = ordered_stack_0.peek()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.stack.ordered_stack.OrderedStack"
    )
    assert (
        f"{type(var_1.items).__module__}.{type(var_1.items).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.items) == 1
    var_0.push_t(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 1.07
    ordered_stack_0 = module_0.OrderedStack()
    var_0 = ordered_stack_0.size()
    var_1 = ordered_stack_0.push_t(var_0)
    var_2 = ordered_stack_0.push(float_0)
    assert len(ordered_stack_0.items) == 2
    var_3 = ordered_stack_0.push(var_0)
    assert len(ordered_stack_0.items) == 3
    var_3.peek()


@pytest.mark.xfail(strict=True)
def test_case_7():
    ordered_stack_0 = module_0.OrderedStack()
    var_0 = ordered_stack_0.size()
    var_1 = ordered_stack_0.push(var_0)
    assert ordered_stack_0.items == [0]
    var_2 = ordered_stack_0.push(var_0)
    assert ordered_stack_0.items == [0, 0]
    var_3 = ordered_stack_0.push_t(var_1)
    var_2.is_empty()


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    ordered_stack_0 = module_0.OrderedStack()
    list_1 = [ordered_stack_0, list_0, ordered_stack_0, ordered_stack_0]
    var_0 = ordered_stack_0.push_t(list_1)
    var_1 = ordered_stack_0.push_t(list_1)
    ordered_stack_0.push(list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 1.07
    ordered_stack_0 = module_0.OrderedStack()
    var_0 = ordered_stack_0.size()
    var_1 = ordered_stack_0.push_t(var_0)
    var_2 = ordered_stack_0.push(float_0)
    assert len(ordered_stack_0.items) == 2
    var_3 = ordered_stack_0.push(float_0)
    assert len(ordered_stack_0.items) == 3
    var_4 = ordered_stack_0.push(var_0)
    assert len(ordered_stack_0.items) == 4
    var_4.peek()
