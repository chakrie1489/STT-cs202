# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.contain_string as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "K`T[)Z=&"
    bytes_0 = b"9\xdb\xc35\xee\x8fqF\n8E\xd21\xed\x98l\xc4"
    list_0 = [str_0, str_0, str_0, bytes_0]
    str_1 = "`"
    str_2 = "NK"
    tuple_0 = (list_0, str_1, str_2)
    bytes_1 = b"\xda\xdd\x8b1\xd1d(\xf2\x16\x9c1:\xfb"
    dict_0 = {}
    tuple_1 = (str_1, bytes_1, dict_0)
    var_0 = module_0.contain_string(bytes_1, dict_0)
    assert var_0 == 0
    var_1 = module_0.contain_string(tuple_0, tuple_1)
    assert var_1 == -1
    none_type_0 = None
    object_0 = module_1.object()
    module_0.contain_string(none_type_0, tuple_1)


def test_case_1():
    str_0 = "WmLBlpV=\x0c\rnfV\\J\rD+r"
    var_0 = module_0.contain_string(str_0, str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "I+\x0b!Qp}I#i; B"
    int_0 = -2093
    set_0 = {int_0}
    list_0 = [str_0, set_0]
    var_0 = module_0.contain_string(list_0, str_0)
    assert var_0 == -1
    int_1 = -530
    dict_0 = {int_1: int_1, int_1: int_1, int_1: int_1, int_1: int_1}
    bool_0 = True
    module_0.contain_string(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    str_0 = "R"
    bool_1 = True
    tuple_0 = (bool_1,)
    bytes_0 = b"s\x1b\xd9"
    tuple_1 = (bool_0, str_0, tuple_0, bytes_0)
    var_0 = module_0.contain_string(tuple_1, bytes_0)
    assert var_0 == -1
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.contain_string(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "`"
    str_1 = "NK"
    var_0 = module_0.contain_string(str_1, str_0)
    assert var_0 == -1
    none_type_0 = None
    module_0.contain_string(none_type_0, none_type_0)
