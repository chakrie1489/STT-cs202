# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.validate_coordinates as module_0
import re as module_1


def test_case_0():
    str_0 = "1"
    var_0 = module_0.is_valid_coordinates_0(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    module_0.is_valid_coordinates_0(set_0)


def test_case_2():
    str_0 = "c:u"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.is_valid_coordinates_1(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 0.0
    module_0.is_valid_coordinates_regular_expression(float_0)


def test_case_5():
    str_0 = "5, 5"
    var_0 = module_0.is_valid_coordinates_0(str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "2md2QVG9!\ro}g"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_coordinates_0(str_0)
    module_0.is_valid_coordinates_0(var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "55555555"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_coordinates_0(str_0)
    assert var_1 is False
    tuple_0 = ()
    module_0.is_valid_coordinates_regular_expression(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "\n    This is an optimal method using iteration.\n    We move p1 k steps ahead into the list.\n    Then we move p1 and p2 together until p1 hits the end.\n    "
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_coordinates_1(str_0)
    var_1.__setitem__(var_1, var_1)


def test_case_9():
    str_0 = ""
    var_0 = module_0.is_valid_coordinates_0(str_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "555,55"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is False
    var_1 = module_0.is_valid_coordinates_regular_expression(str_0)
    assert var_1 is False
    var_2 = module_1.escape(str_0)
    var_3 = module_0.is_valid_coordinates_regular_expression(str_0)
    assert var_3 is False
    module_0.is_valid_coordinates_regular_expression(var_3)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "5, 5"
    var_0 = module_0.is_valid_coordinates_1(str_0)
    assert var_0 is True
    var_1 = module_0.is_valid_coordinates_0(str_0)
    assert var_1 is True
    module_1.findall(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "555, 5"
    list_0 = [str_0]
    var_0 = module_0.is_valid_coordinates_0(list_0)
    assert var_0 is False
    var_1 = module_0.is_valid_coordinates_0(str_0)
    assert var_1 is False
    module_1.Pattern(*var_1)
