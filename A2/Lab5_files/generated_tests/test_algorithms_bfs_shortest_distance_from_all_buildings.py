# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bfs.shortest_distance_from_all_buildings as module_0
import collections as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xf8?"
    module_0.shortest_distance(bytes_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.shortest_distance(none_type_0)
    assert var_0 == -1


def test_case_2():
    str_0 = "keon"
    var_0 = module_0.shortest_distance(str_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.bfs(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    var_0 = module_0.shortest_distance(list_0)
    assert var_0 == -1
    var_1 = module_0.shortest_distance(dict_0)
    assert var_1 == -1
    module_0.shortest_distance(var_0)


def test_case_5():
    float_0 = -3991.72
    var_0 = module_0.bfs(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    module_0.bfs(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_7():
    bytes_0 = b"\x16\xfa.\x02\xa2C\xeeouR\x07\xc7\x011\xd4\x18K\xf5@\\"
    tuple_0 = (bytes_0,)
    var_0 = module_0.shortest_distance(tuple_0)
    assert var_0 == -1


def test_case_8():
    str_0 = "*"
    bytes_0 = b"\x16\xfa.\x02\xa2C\xeeouR\x07\xc7\x011\xd4\x18K\xf5@\\"
    tuple_0 = (bytes_0,)
    var_0 = module_0.shortest_distance(tuple_0)
    assert var_0 == -1
    var_1 = module_0.shortest_distance(str_0)
    assert var_1 == 0
    var_2 = module_0.shortest_distance(var_1)
    assert var_2 == -1
    var_3 = module_0.bfs(str_0, var_1, var_1, var_1, var_1)
    with pytest.raises(TypeError):
        module_1.namedtuple(var_1, var_0, defaults=var_3, module=var_3)


def test_case_9():
    bytes_0 = b"jl\xf4@\x1e\x01\x02P-aN\xd8\xc2\x96\xafT="
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.shortest_distance(list_0)
    assert var_0 == -1
