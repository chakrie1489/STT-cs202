# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.backtrack.pattern_match as module_0


def test_case_0():
    str_0 = "?\x0b\x0b"
    var_0 = module_0.pattern_match(str_0, str_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.pattern_match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "+"
    str_1 = " Class of Node"
    var_0 = module_0.pattern_match(str_0, str_1)
    assert var_0 is True
    bool_0 = False
    tuple_0 = (str_0, str_0, bool_0, var_0)
    var_1 = module_0.pattern_match(tuple_0, tuple_0)
    assert var_1 is True
    list_0 = []
    var_2 = module_0.pattern_match(list_0, list_0)
    assert var_2 is True
    int_0 = 1997
    module_0.pattern_match(int_0, int_0)


def test_case_3():
    str_0 = "]"
    tuple_0 = (str_0,)
    int_0 = 666
    dict_0 = {tuple_0: int_0, str_0: int_0}
    tuple_1 = (tuple_0, int_0, dict_0)
    var_0 = module_0.pattern_match(tuple_1, tuple_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = " of "
    str_1 = " Class of Node"
    var_0 = module_0.pattern_match(str_0, str_1)
    assert var_0 is False
    bool_0 = False
    tuple_0 = (str_0, str_0, bool_0, var_0)
    var_1 = module_0.pattern_match(tuple_0, tuple_0)
    assert var_1 is True
    list_0 = []
    var_2 = module_0.pattern_match(list_0, list_0)
    assert var_2 is True
    int_0 = 1997
    module_0.pattern_match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = " Class of Node"
    var_0 = module_0.pattern_match(str_0, str_0)
    assert var_0 is True
    tuple_0 = ()
    tuple_1 = (var_0, var_0, var_0, tuple_0)
    var_1 = module_0.pattern_match(tuple_1, str_0)
    assert var_1 is False
    int_0 = 143
    module_0.pattern_match(tuple_1, int_0)
