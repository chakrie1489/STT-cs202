# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.strings.longest_common_prefix as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 1.3
    module_0.common_prefix(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.common_prefix(none_type_0, none_type_0)
    assert var_0 == ""
    module_0.longest_common(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xbfB\xce\xb6\xe2\x03\xf6\xdf\xfe*"
    module_0.longest_common_prefix_v1(bytes_0)


def test_case_3():
    list_0 = []
    var_0 = module_0.longest_common_prefix_v1(list_0)
    assert var_0 == ""
    var_1 = module_0.longest_common_prefix_v3(list_0)
    assert var_1 == ""


def test_case_4():
    list_0 = []
    tuple_0 = (list_0,)
    tuple_1 = (tuple_0, list_0, tuple_0)
    list_1 = [tuple_1, list_0, list_0]
    var_0 = module_0.longest_common_prefix_v2(list_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    var_0 = module_0.longest_common_prefix_v2(dict_0)
    assert var_0 == ""
    none_type_0 = None
    var_1 = module_0.longest_common_prefix_v2(none_type_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_prefix_v3(var_1)
    assert var_2 == ""
    module_0.longest_common(var_1, var_1, var_1)


def test_case_6():
    str_0 = "\n    :type nums: List[int]\n    :rtype: int\n    "
    var_0 = module_0.common_prefix(str_0, str_0)
    assert var_0 == "\n    :type nums: List[int]\n    :rtype: int\n    "
    var_1 = module_0.common_prefix(str_0, str_0)
    assert var_1 == "\n    :type nums: List[int]\n    :rtype: int\n    "
    var_2 = module_0.longest_common_prefix_v3(var_1)
    assert var_2 == ""
    var_3 = module_0.longest_common_prefix_v3(var_1)
    assert var_3 == ""
    var_4 = module_0.longest_common_prefix_v1(var_3)
    assert var_4 == ""


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xeb\xac4\x91By\xbd"
    module_0.longest_common(bytes_0, bytes_0, bytes_0)


def test_case_8():
    none_type_0 = None
    var_0 = module_0.common_prefix(none_type_0, none_type_0)
    assert var_0 == ""
    bytes_0 = b"\x9f)3"
    var_1 = module_0.common_prefix(bytes_0, bytes_0)
    assert var_1 == b"\x9f)3"
    list_0 = [bytes_0]
    var_2 = module_0.longest_common_prefix_v2(list_0)
    assert var_2 == b"\x9f)3"
    tuple_0 = (list_0,)
    int_0 = 456
    var_3 = module_0.common_prefix(int_0, var_0)
    assert var_3 == ""
    var_4 = module_0.longest_common_prefix_v1(tuple_0)
    var_5 = module_0.common_prefix(tuple_0, var_4)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"d\n\xf2\x8b\xba\x87\xc9:"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.longest_common_prefix_v1(list_0)
    assert var_0 == b"d\n\xf2\x8b\xba\x87\xc9:"
    str_0 = "L\rrj2D"
    module_0.longest_common(var_0, var_0, str_0)


def test_case_10():
    bytes_0 = b"\xeb\xac4\x91By\xbd"
    var_0 = module_0.common_prefix(bytes_0, bytes_0)
    assert var_0 == b"\xeb\xac4\x91By\xbd"


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "wb]IIK{"
    var_0 = module_0.longest_common_prefix_v2(str_0)
    assert var_0 == ""
    int_0 = -1581
    module_0.longest_common_prefix_v3(int_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "...-"
    var_0 = module_0.longest_common_prefix_v2(str_0)
    assert var_0 == ""
    list_0 = [str_0]
    var_1 = module_0.longest_common_prefix_v3(list_0)
    assert var_1 == "...-"
    str_1 = "wb]IIK{"
    var_2 = module_0.longest_common_prefix_v3(str_1)
    assert var_2 == ""
    var_3 = module_0.common_prefix(var_2, str_1)
    assert var_3 == ""
    var_4 = module_0.common_prefix(str_1, str_1)
    assert var_4 == "wb]IIK{"
    var_5 = module_0.longest_common_prefix_v2(list_0)
    assert var_5 == "...-"
    var_6 = module_0.longest_common_prefix_v1(var_2)
    assert var_6 == ""
    module_0.longest_common(var_4, var_4, var_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\xb8\xb5\x0c\x1119\x0c,\x08\xd6\xd4\\\xc1E\xc2\xab"
    tuple_0 = (bytes_0,)
    tuple_1 = (bytes_0, tuple_0, tuple_0)
    var_0 = module_0.common_prefix(tuple_1, tuple_0)
    bool_0 = False
    var_1 = module_0.longest_common_prefix_v2(bool_0)
    assert var_1 == ""
    var_2 = module_0.longest_common_prefix_v2(var_1)
    var_3 = module_0.common_prefix(var_0, var_2)
    assert var_3 == ""
    var_4 = module_0.longest_common_prefix_v1(var_1)
    assert var_4 == ""
    str_0 = "66YqWNP8}sb!'1Q"
    none_type_0 = None
    var_5 = module_0.longest_common_prefix_v1(var_2)
    assert var_5 == ""
    module_0.longest_common(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "wb]IIK{"
    str_1 = "wb]u4K{v"
    var_0 = module_0.common_prefix(str_0, str_1)
    assert var_0 == "wb]"
    var_1 = module_0.longest_common_prefix_v3(str_0)
    assert var_1 == ""
    var_2 = module_0.common_prefix(var_1, str_0)
    assert var_2 == ""
    var_3 = module_0.common_prefix(var_0, var_1)
    assert var_3 == ""
    none_type_0 = None
    var_4 = module_0.common_prefix(none_type_0, var_2)
    assert var_4 == ""
    int_0 = -1581
    module_0.longest_common_prefix_v3(int_0)
