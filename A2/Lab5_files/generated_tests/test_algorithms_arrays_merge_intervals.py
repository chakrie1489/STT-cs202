# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.arrays.merge_intervals as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    float_0 = -2700.0
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.__getitem__(float_0)
    assert var_0 == pytest.approx(-2700.0, abs=0.01, rel=0.01)
    var_0.__getitem__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Can only add monomials, ints, floats, or Fractions."
    set_0 = {str_0, str_0}
    list_0 = [set_0]
    interval_0 = module_0.Interval(list_0)
    assert interval_0.end == 0
    list_1 = [interval_0]
    module_0.merge_intervals(list_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\n    input: [7, 1, 5, 3, 6, 4]\n    diff : [X, -6, 4, -2, 3, -2]\n    :type prices: List[int]\n    :rtype: int\n    "
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.print_intervals(str_0)
    interval_1 = module_0.Interval()
    assert len(interval_1) == 0
    var_1 = interval_1.merge(interval_1)
    interval_1.merge(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    var_0 = module_0.merge_intervals(none_type_0)
    int_0 = 125
    list_0 = [int_0]
    module_0.merge_intervals(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -1850
    module_0.merge_intervals(int_0)


def test_case_5():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.merge(interval_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "Can only add monomials, ints, floats, or Fractions."
    set_0 = {str_0, str_0}
    list_0 = [set_0]
    none_type_0 = None
    var_0 = module_0.merge_intervals(none_type_0)
    interval_0 = module_0.Interval(list_0)
    assert interval_0.end == 0
    var_1 = interval_0.__repr__()
    assert (
        var_1
        == "Interval ([{'Can only add monomials, ints, floats, or Fractions.'}], 0)"
    )
    module_0.merge_intervals(interval_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    interval_1 = module_0.Interval(interval_0)
    assert len(interval_1.start) == 0
    assert interval_1.end == 0
    var_0 = interval_0.__eq__(interval_0)
    assert var_0 is True
    interval_2 = module_0.Interval()
    assert len(interval_2) == 0
    interval_1.as_list()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    interval_0 = module_0.Interval(bool_0)
    assert len(interval_0) == 0
    var_0 = interval_0.__contains__(bool_0)
    assert var_0 is True
    module_0.merge_intervals(bool_0)


def test_case_9():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    interval_1 = module_0.Interval(interval_0)
    assert len(interval_1.start) == 0
    assert interval_1.end == 0
    var_0 = interval_0.__eq__(interval_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\x9e:\xf3-\xd5\x9b\xc2\x12K|"
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.merge(interval_0)
    interval_0.merge(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x81a6^&\x9a\x96\x97~\xd3W\x80\x17\xc4("
    list_0 = [bytes_0, bytes_0]
    var_0 = module_0.merge_intervals(list_0)
    var_0.__getitem__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "Can only add monomials, ints, floats, or Fractions."
    none_type_0 = None
    interval_0 = module_0.Interval(end=none_type_0)
    assert interval_0.start == 0
    list_0 = [str_0]
    var_0 = module_0.Interval()
    assert len(var_0) == 0
    var_1 = module_0.merge_intervals(list_0)
    var_2 = var_1.__iter__()
    var_1.as_list()


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.__contains__(bool_0)
    assert var_0 is False
    interval_0.print_intervals(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\x9e:\xf3-\xd5\x9b\xc2\x12K|"
    interval_0 = module_0.Interval(end=bytes_0)
    assert interval_0.start == 0
    interval_1 = module_0.Interval()
    assert len(interval_1) == 0
    var_0 = interval_0.__eq__(interval_1)
    assert var_0 is False
    interval_2 = module_0.Interval(end=interval_0)
    assert interval_2.start == 0
    var_1 = interval_1.as_list()
    var_2 = var_1.__repr__()
    assert var_2 == "[]"
    bytes_1 = b"\x06\x1dB(\x89\x15a9\xf6\x82\xe2\x91Si\x87\x12"
    interval_2.merge(bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\n\x04q\xd3\x1b\x97c4q\xa7\xdbv\x0e\xbe\xdf\xa6[\x95\xfd"
    list_0 = [bytes_0, bytes_0]
    module_0.merge_intervals(list_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    float_0 = -428.394693
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.__contains__(float_0)
    assert var_0 is False
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_17():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    var_0 = interval_0.as_list()
    none_type_0 = None
    interval_1 = module_0.Interval(none_type_0)
    assert interval_1.end == 0
    var_1 = interval_0.__eq__(interval_1)
    assert var_1 is False
    var_2 = interval_0.__eq__(interval_0)
    assert var_2 is True
    var_3 = interval_0.__iter__()
    interval_2 = module_0.Interval()
    assert len(interval_2) == 0
    interval_0.__contains__(var_3)


@pytest.mark.xfail(strict=True)
def test_case_18():
    interval_0 = module_0.Interval()
    assert len(interval_0) == 0
    list_0 = [interval_0, interval_0]
    var_0 = interval_0.merge(list_0)
    interval_1 = module_0.Interval()
    assert len(interval_1) == 0
    var_1 = interval_0.__eq__(interval_1)
    assert var_1 is True
    var_2 = interval_0.as_list()
    interval_2 = module_0.Interval()
    assert len(interval_2) == 0
    var_0.__contains__(list_0)
