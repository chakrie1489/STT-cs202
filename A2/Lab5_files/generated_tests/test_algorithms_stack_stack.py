# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.stack.stack as module_0


def test_case_0():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    var_0 = linked_list_stack_0.__len__()
    assert var_0 == 0
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    var_1 = array_stack_0.push(linked_list_stack_0)
    assert len(array_stack_0) == 1
    var_2 = array_stack_0.__str__()
    assert var_2 == "Top-> Top-> "
    var_3 = array_stack_0.push(array_stack_0)
    assert len(array_stack_0) == 2
    var_4 = array_stack_0.pop()
    assert len(array_stack_0) == 1
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(var_4) == 1
    with pytest.raises(IndexError):
        linked_list_stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    var_0 = array_stack_0.push(bool_0)
    assert len(array_stack_0) == 1
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    bytes_0 = b""
    var_0 = array_stack_0.push(linked_list_stack_0)
    assert len(array_stack_0) == 1
    array_stack_1 = module_0.ArrayStack()
    assert len(array_stack_1) == 0
    var_1 = array_stack_0.push(bytes_0)
    assert len(array_stack_0) == 2
    stack_node_0 = module_0.StackNode(bytes_0)
    var_2 = array_stack_0.__str__()
    assert var_2 == "Top-> b'' Top-> "
    var_3 = array_stack_0.push(array_stack_0)
    assert len(array_stack_0) == 3
    linked_list_stack_1 = module_0.LinkedListStack()
    assert len(linked_list_stack_1) == 0
    array_stack_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_3():
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    var_0 = array_stack_0.__str__()
    assert var_0 == "Top-> "
    array_stack_0.peek()


def test_case_4():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    var_0 = linked_list_stack_0.__str__()
    assert var_0 == "Top-> "


@pytest.mark.xfail(strict=True)
def test_case_5():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    linked_list_stack_1 = module_0.LinkedListStack()
    assert len(linked_list_stack_1) == 0
    linked_list_stack_1.pop()


def test_case_6():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    linked_list_stack_1 = module_0.LinkedListStack()
    assert len(linked_list_stack_1) == 0
    with pytest.raises(IndexError):
        linked_list_stack_1.peek()


def test_case_7():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0


def test_case_8():
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0


def test_case_9():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    bytes_0 = b""
    var_0 = array_stack_0.push(linked_list_stack_0)
    assert len(array_stack_0) == 1
    var_1 = array_stack_0.peek()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(var_1) == 0
    var_2 = array_stack_0.push(bytes_0)
    assert len(array_stack_0) == 2
    var_3 = array_stack_0.__str__()
    assert var_3 == "Top-> b'' Top-> "
    var_4 = array_stack_0.push(array_stack_0)
    assert len(array_stack_0) == 3
    var_5 = array_stack_0.pop()
    assert len(array_stack_0) == 2
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(var_5) == 2
    var_6 = linked_list_stack_0.push(var_5)
    assert len(linked_list_stack_0) == 1
    assert len(var_1) == 1


def test_case_10():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    bytes_0 = b""
    var_0 = array_stack_0.push(linked_list_stack_0)
    assert len(array_stack_0) == 1
    var_1 = array_stack_0.peek()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(var_1) == 0
    var_2 = array_stack_0.push(bytes_0)
    assert len(array_stack_0) == 2
    var_3 = array_stack_0.push(array_stack_0)
    assert len(array_stack_0) == 3
    var_4 = array_stack_0.pop()
    assert len(array_stack_0) == 2
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(var_4) == 2
    with pytest.raises(IndexError):
        linked_list_stack_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_11():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    var_0 = linked_list_stack_0.push(array_stack_0)
    assert len(linked_list_stack_0) == 1
    var_1 = linked_list_stack_0.__str__()
    assert var_1 == "Top-> Top-> "
    var_1.pop()


@pytest.mark.xfail(strict=True)
def test_case_12():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    bytes_0 = b""
    var_0 = array_stack_0.push(linked_list_stack_0)
    assert len(array_stack_0) == 1
    var_1 = linked_list_stack_0.__str__()
    assert var_1 == "Top-> "
    var_2 = linked_list_stack_0.push(bytes_0)
    assert len(linked_list_stack_0) == 1
    var_3 = linked_list_stack_0.pop()
    assert var_3 == b""
    assert len(linked_list_stack_0) == 0
    var_0.peek()


@pytest.mark.xfail(strict=True)
def test_case_13():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    array_stack_0 = module_0.ArrayStack()
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    bytes_0 = b""
    var_0 = array_stack_0.push(linked_list_stack_0)
    assert len(array_stack_0) == 1
    array_stack_1 = module_0.ArrayStack()
    assert len(array_stack_1) == 0
    stack_node_0 = linked_list_stack_0.push(bytes_0)
    assert len(linked_list_stack_0) == 1
    var_1 = array_stack_0.__str__()
    assert var_1 == "Top-> Top-> b''"
    var_2 = array_stack_0.push(array_stack_0)
    assert len(array_stack_0) == 2
    var_3 = array_stack_0.pop()
    assert len(array_stack_0) == 1
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(var_3) == 1
    var_4 = linked_list_stack_0.peek()
    assert var_4 == b""
    bytes_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_14():
    linked_list_stack_0 = module_0.LinkedListStack()
    assert (
        f"{type(linked_list_stack_0).__module__}.{type(linked_list_stack_0).__qualname__}"
        == "algorithms.stack.stack.LinkedListStack"
    )
    assert len(linked_list_stack_0) == 0
    bool_0 = True
    array_stack_0 = module_0.ArrayStack(bool_0)
    assert (
        f"{type(array_stack_0).__module__}.{type(array_stack_0).__qualname__}"
        == "algorithms.stack.stack.ArrayStack"
    )
    assert len(array_stack_0) == 0
    var_0 = array_stack_0.push(linked_list_stack_0)
    assert len(array_stack_0) == 1
    var_1 = array_stack_0.push(var_0)
    assert len(array_stack_0) == 2
    var_2 = var_0.__str__()
    var_3 = linked_list_stack_0.__iter__()
    var_0.push(var_1)
