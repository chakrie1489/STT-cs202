# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.traversal.inorder as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = 149.289051
    module_0.inorder_rec(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.inorder(bool_0)


def test_case_2():
    none_type_0 = None
    var_0 = module_0.inorder(none_type_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.inorder_rec(none_type_0)


def test_case_4():
    float_0 = -977.0
    node_0 = module_0.Node(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 794.51
    module_0.inorder_rec(float_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 150
    node_0 = module_0.Node(int_0)
    var_0 = module_0.inorder_rec(node_0)
    bytes_0 = b"?\xd9\\\xd1\x0f\x0f\x02\xdf\xd5\xd0D\xfa%\xf5"
    node_1 = module_0.Node(bytes_0)
    var_1 = module_0.inorder(node_1)
    node_2 = module_0.Node(node_1)
    module_0.inorder(int_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 150
    node_0 = module_0.Node(int_0)
    node_1 = module_0.Node(int_0)
    var_0 = module_0.inorder(node_1)
    var_1 = module_0.inorder(node_0)
    node_2 = module_0.Node(node_0, right=var_1)
    assert node_2.right == [150]
    node_3 = module_0.Node(var_0, right=int_0)
    assert node_3.val == [150]
    module_0.inorder(node_3)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 150
    node_0 = module_0.Node(int_0)
    var_0 = module_0.inorder_rec(node_0)
    bytes_0 = b"?\xd9\\\xd1\x0f\x0f\x02\xdf\xd5\xd0D\xfa%\xf5"
    node_1 = module_0.Node(bytes_0)
    node_2 = module_0.Node(node_1, node_0)
    var_1 = module_0.inorder(node_2)
    node_3 = module_0.Node(bytes_0)
    module_0.inorder(var_1)
