# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.traversal.preorder as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xcb\x944\x1b.\xe6\xc2\xe7c\x1f:q\x0b\xda"
    module_0.preorder(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.preorder(none_type_0)
    list_0 = []
    module_0.preorder_rec(list_0, none_type_0)


def test_case_2():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    var_0 = module_0.preorder_rec(node_0)


def test_case_3():
    int_0 = -4680
    node_0 = module_0.Node(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_0.preorder_rec(none_type_0)
    bool_0 = True
    module_0.preorder_rec(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -1633
    node_0 = module_0.Node(int_0, right=int_0)
    module_0.preorder(node_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 1588
    node_0 = module_0.Node(int_0, int_0)
    dict_0 = {node_0: node_0, int_0: node_0, int_0: node_0}
    node_1 = module_0.Node(dict_0, node_0)
    module_0.preorder(node_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_0 = 2j
    var_0 = module_0.Node(complex_0)
    node_0 = module_0.Node(complex_0)
    var_1 = module_0.preorder_rec(var_0)
    var_2 = module_0.preorder(var_0)
    module_0.preorder_rec(node_0, complex_0)
