# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.bfs.word_ladder as module_0
import builtins as module_1


def test_case_0():
    bytes_0 = b"\x91C\x19G\x1e(>\xc9"
    str_0 = '/"@j\x0bD<5'
    list_0 = [bytes_0, bytes_0, str_0]
    var_0 = module_0.ladder_length(str_0, bytes_0, list_0)
    assert var_0 == -1
    var_1 = module_0.ladder_length(list_0, bytes_0, var_0)
    assert var_1 == -1


def test_case_1():
    str_0 = "6@c"
    var_0 = module_0.ladder_length(str_0, str_0, str_0)
    assert var_0 == 0


def test_case_2():
    float_0 = -1408.0087
    var_0 = module_0.word_range(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = '/"@j\x0bD<5'
    bytes_0 = b"\nw\x899L\x8c\x8a\xcc"
    module_0.ladder_length(str_0, bytes_0, bytes_0)


def test_case_4():
    str_0 = '/"@j\x0bD<5'
    bytes_0 = b"\nw\x899L\x8c\x8a\xcc"
    var_0 = module_0.ladder_length(str_0, bytes_0, str_0)
    assert var_0 == -1


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    tuple_0 = (set_0, set_0, list_0)
    var_0 = module_0.ladder_length(tuple_0, list_0, tuple_0)
    assert var_0 == 1
    var_1 = module_1.object()
    var_2 = module_0.word_range(var_0)
    set_1 = set()
    module_0.ladder_length(var_2, var_0, set_1)
