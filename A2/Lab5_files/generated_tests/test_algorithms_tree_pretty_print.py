# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.tree.pretty_print as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '\nWrite code to partition a linked list around a value x, such that all nodes less\nthan x come before all nodes greater than or equal to x.  If x is contained\nwithin the list, the values of x only need to be after the elements less than x.\nThe partition element x can appear anywhere in the "right partition";\nit does not need to appear between the left and right partitions.\n\n3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1 [partition=5]\n3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8\n\nWe assume the values of all linked list nodes are int and that x in an int.\n'
    module_0.tree_print(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "P"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = module_0.tree_print(dict_0)
    object_0 = module_1.object()
    module_0.tree_print(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.tree_print(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xc7m\xbe"
    tuple_0 = (bytes_0,)
    dict_0 = {bytes_0: bytes_0, tuple_0: bytes_0}
    var_0 = module_0.tree_print(dict_0)
    none_type_0 = None
    module_0.tree_print(none_type_0)
